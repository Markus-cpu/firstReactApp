{"version":3,"sources":["hoc/withAuthRedirect.js","components/Dialogs/Dialogs.module.css","components/Dialogs/DialogItem/DialogItem.module.css","components/Dialogs/MassageItem/massageItem.module.css","components/Dialogs/DialogItem/DialogItem.jsx","components/Dialogs/MassageItem/massageItem.jsx","components/Dialogs/Dialogs.jsx","components/Dialogs/DialogsContainer.jsx"],"names":["mapStateToPropsForRedirect","state","isAuth","auth","withAuthRedirect","Component","RedirectComponent","render","props","to","React","connect","module","exports","DialogItem","path","id","className","c","dialog","alt","ava","src","name","MassageItem","massage","MessageReduxForm","reduxForm","form","onSubmit","handleSubmit","Field","textarea","placeholder","component","button","Dialogs","dialogElements","dialogsData","map","key","messageElements","messagesData","message","dialogs","dialogsItems","title","massagesItems","addText","values","addMessage","addNewMessageBody","compose","messagesPage","newMessages"],"mappings":"qMAIMA,EAA4B,SAACC,GAC/B,MAAO,CACHC,OAAQD,EAAME,KAAKD,SAGdE,EAAkB,SAACC,GAAc,IACpCC,EADmC,4MAErCC,OAAQ,WACJ,OAAI,EAAKC,MAAMN,OACR,kBAACG,EAAc,EAAKG,OADG,kBAAC,IAAD,CAAUC,GAAI,YAHX,YACTC,IAAML,WAOtC,OADqCM,YAAQX,EAARW,CAAoCL,K,oBCf7EM,EAAOC,QAAU,CAAC,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,QAAU,yBAAyB,MAAQ,uBAAuB,QAAU,yBAAyB,SAAW,0BAA0B,OAAS,0B,oBCAtRD,EAAOC,QAAU,CAAC,aAAe,iCAAiC,OAAS,2BAA2B,IAAM,0B,oBCA5GD,EAAOC,QAAU,CAAC,QAAU,+B,wGCebC,EAZI,SAACN,GAEhB,IAAIO,EAAO,YAAcP,EAAMQ,GAC/B,OACI,yBAAKC,UAAWC,IAAEC,QACd,kBAAC,IAAD,CAASV,GAAIM,GAAM,yBAAKK,IAAK,IAAKH,UAAWC,IAAEG,IAAKC,IAAKd,EAAMa,OAC/D,kBAAC,IAAD,CAASZ,GAAIM,GAAOP,EAAMe,Q,kBCEvBC,EARK,SAAChB,GACjB,OACI,yBAAKS,UAAWC,IAAEO,SACbjB,EAAMiB,U,kBCiBbC,EAAmBC,YAAU,CAACC,KAAM,iBAAjBD,EAjBN,SAACnB,GAChB,OACI,oCACI,0BAAMqB,SAAUrB,EAAMsB,cAClB,6BACI,kBAACC,EAAA,EAAD,CAAOd,UAAWC,IAAEc,SACZC,YAAY,yBACZV,KAAM,oBACNW,UAAW,cAGvB,4BAAQjB,UAAWC,IAAEiB,QAArB,aA+CDC,EAtCC,SAAC5B,GAKb,IAAI6B,EAAkB7B,EAAM8B,YAAYC,KAAI,SAAApB,GAAM,OAAI,kBAAC,EAAD,CAAYI,KAAMJ,EAAOI,KAAMiB,IAAKrB,EAAOH,GAAIA,GAAIG,EAAOH,GAAIK,IAAKF,EAAOE,SAC5HoB,EAAkBjC,EAAMkC,aAAaH,KAAI,SAAAd,GAAO,OAAI,kBAAC,EAAD,CAAaA,QAASA,EAAQkB,QAASH,IAAKf,EAAQT,QAO5G,OACI,yBAAKC,UAAWC,IAAE0B,SACd,yBAAK3B,UAAWC,IAAE2B,cACd,wBAAI5B,UAAWC,IAAE4B,OAAjB,SACCT,GAEL,yBAAKpB,UAAWC,IAAE6B,eACd,wBAAI9B,UAAWC,IAAE4B,OAAjB,YACCL,EACD,yBAAKxB,UAAWC,IAAE8B,SACd,kBAACtB,EAAD,CAAkBG,SAff,SAACoB,GAChBzC,EAAM0C,WAAWD,EAAOE,0B,iCCmBjBC,sBACXzC,aAVmB,SAACV,GACpB,MAAO,CAGHqC,YAAarC,EAAMoD,aAAaf,YAChCI,aAAczC,EAAMoD,aAAaX,aACjCY,YAAarD,EAAMoD,aAAaC,eAIX,CAACJ,iBAC1B9C,IAFWgD,CAEOhB","file":"static/js/6.c6482cf4.chunk.js","sourcesContent":["import React from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\n\r\nconst mapStateToPropsForRedirect =(state)=> {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n};\r\nexport const withAuthRedirect =(Component)=> {\r\n    class RedirectComponent extends React.Component {\r\n        render =()=> {\r\n            if(!this.props.isAuth) return <Redirect to={\"/login\"}/>;\r\n            return <Component {...this.props}/>\r\n        }\r\n    }\r\n    let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent);\r\n    return ConnectedAuthRedirectComponent;\r\n};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__tkFcg\",\"dialogsItems\":\"Dialogs_dialogsItems__36AgN\",\"dialog\":\"Dialogs_dialog__3Qd4Z\",\"massage\":\"Dialogs_massage__pvZ2R\",\"title\":\"Dialogs_title__QniCQ\",\"addText\":\"Dialogs_addText__3LcTX\",\"textarea\":\"Dialogs_textarea__2axge\",\"button\":\"Dialogs_button__3jIIO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogsItems\":\"DialogItem_dialogsItems__32FsQ\",\"dialog\":\"DialogItem_dialog__Hvu-O\",\"ava\":\"DialogItem_ava__1-_V4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"massage\":\"massageItem_massage__1peoO\"};","import React from 'react';\r\nimport c from './DialogItem.module.css';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nconst DialogItem = (props) => {\r\n\r\n    let path = '/dialogs/' + props.id;\r\n    return (\r\n        <div className={c.dialog}>\r\n            <NavLink to={path}><img alt={'#'} className={c.ava} src={props.ava} /></NavLink>\r\n            <NavLink to={path}>{props.name}</NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default DialogItem;","import React from 'react';\r\nimport c from './massageItem.module.css';\r\n\r\n\r\nconst MassageItem = (props) => {\r\n    return (\r\n        <div className={c.massage}>\r\n            {props.massage}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MassageItem;","import React from 'react';\r\nimport c from './Dialogs.module.css';\r\nimport DialogItem from './DialogItem/DialogItem';\r\nimport MassageItem from './MassageItem/massageItem';\r\nimport {Field, reduxForm} from \"redux-form\";\r\n\r\n\r\nconst MessageForm =(props)=> {\r\n    return (\r\n        <>\r\n            <form onSubmit={props.handleSubmit}>\r\n                <div>\r\n                    <Field className={c.textarea}\r\n                            placeholder='New message here......'\r\n                            name={'addNewMessageBody'}\r\n                            component={'textarea'}\r\n                    />\r\n                </div>\r\n                <button className={c.button}>Send</button>\r\n            </form>\r\n        </>\r\n    )\r\n}\r\n\r\nconst MessageReduxForm = reduxForm({form: 'addNewMessage'})(MessageForm)\r\n\r\n\r\nconst Dialogs = (props) => {\r\n    //Здесь обьявляется переменные, которым присваеваем значение\r\n    //из файла store.js , через пропсы рендерим данные в компоненту\r\n    //DialogItem, с помощью метода массива map каждому свойству создает отдельный массив,\r\n    //при этом не изменяя основной массив \r\n    let dialogElements =  props.dialogsData.map(dialog => <DialogItem name={dialog.name} key={dialog.id} id={dialog.id} ava={dialog.ava}/>);\r\n    let messageElements = props.messagesData.map(massage => <MassageItem massage={massage.message} key={massage.id}/>);\r\n\r\n    let addNewMessage =(values)=> {//определяем обработчик события\r\n        props.addMessage(values.addNewMessageBody);\r\n    };\r\n\r\n    //здесь переменные вызываются\r\n    return (\r\n        <div className={c.dialogs}>\r\n            <div className={c.dialogsItems}>\r\n                <h2 className={c.title}>Users</h2>\r\n                {dialogElements} \r\n            </div>\r\n            <div className={c.massagesItems}>\r\n                <h2 className={c.title}>Messages</h2>\r\n                {messageElements}\r\n                <div className={c.addText}>\r\n                    <MessageReduxForm onSubmit={addNewMessage}/>\r\n                    {/*<textarea onChange={onMessageChange} value={newMessageElement} className={c.textarea}\r\n                              //значение(value) textarea зависит от того, что сидит в store.js\r\n                              // onChange срабатывает всякий раз, когда идет попытка изменить поле textarea\r\n                              //name=\"message\" rows=\"10\" cols=\"40\"\r\n                              placeholder='New message here......' >\r\n                    </textarea>\r\n                    <button className={c.button} onClick={onAddMessage}>Send</button>*/}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\n//экспортируем компоненту\r\nexport default Dialogs;\r\n","import Dialogs from './Dialogs';\r\nimport {addMessage} from '../../Redux/messagesPage-reducer';\r\nimport {connect} from \"react-redux\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\n//передаем store через контекст, а не через props\r\n//тем самым перепригиваем\r\n/*const DialogsContainer = () => {\r\n    /!*let state = props.store.getState().messagesPage;\r\n\r\n    let addMessage = () => {//обработчик события\r\n        let action = addMessageActionCreator();\r\n        props.store.dispatch(action);\r\n    };\r\n\r\n    let MessageChange = (text) => {//определяем обработчик события\r\n        let action = updateNewMessageActionCreator(text);\r\n        props.store.dispatch(action);//отправляем в store.js то значение, что вводит user в поле textarea\r\n    };*!/\r\n\r\n    //здесь переменные вызываются\r\n    return (\r\n        <StoreContext.Consumer>\r\n            {\r\n                (store) => {//store мы берем из контекста\r\n                    let state = store.getState().messagesPage;\r\n                    let addMessage =()=> {\r\n                        let action = addMessageActionCreator();\r\n                        store.dispatch(action);\r\n                    };\r\n                    let MessageChange =(text)=> {\r\n                        let action = updateNewMessageActionCreator(text);\r\n                        store.dispatch(action);\r\n                    };\r\n                    //в компоненту Dialogs  мы передаем всеравно через props\r\n                    return <Dialogs addMessage={addMessage} updateNewMessage={MessageChange} dialogsData={state.dialogsData}\r\n                             messagesData={state.messagesData} newMessages={state.newMessages}/>\r\n                }\r\n\r\n            }\r\n        </StoreContext.Consumer>\r\n    )\r\n};*/\r\n//когда у нас в state происходят изменения, запускается\r\n//данная функция, и формируется новый обьект, и должен сравниться со старым обьектом\r\nconst mapStateToProps =(state)=> {\r\n    return {\r\n        //какие данные необходимо для нашей компоненты\r\n        //мы должны передать в connect\r\n        dialogsData: state.messagesPage.dialogsData,\r\n        messagesData: state.messagesPage.messagesData,\r\n        newMessages: state.messagesPage.newMessages\r\n    }\r\n};\r\nexport default compose(\r\n    connect(mapStateToProps, {addMessage}),\r\n    withAuthRedirect)(Dialogs);"],"sourceRoot":""}